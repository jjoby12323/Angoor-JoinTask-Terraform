name: Test Deployment Workflow

on:
  workflow_dispatch:  # Manual trigger

jobs:
  terraform-ecr:
    name: Terraform Apply (ECR Only)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Terraform Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply (Only ECR)
        run: terraform apply -target=aws_ecr_repository.django_repo -target=aws_ecr_repository.celery_repo -auto-approve
      
      - name: Capture ECR Outputs
        id: tf_outputs
        run: |
              terraform output
              
              ECR_DJANGO_URL=$(terraform output -json | jq -r '.ecr_django_repo')
              ECR_CELERY_URL=$(terraform output -json | jq -r '.ecr_celery_repo')

              echo "ECR_DJANGO=$ECR_DJANGO_URL" >> $GITHUB_ENV
              echo "ECR_CELERY=$ECR_CELERY_URL" >> $GITHUB_ENV

              echo "Final ECR_DJANGO: $ECR_DJANGO_URL"
              echo "Final ECR_CELERY: $ECR_CELERY_URL"

      - name: Debug ECR Environment Variables
        run: |
          echo "ECR_DJANGO from ENV: $ECR_DJANGO"
          echo "ECR_CELERY from ENV: $ECR_CELERY"

  docker:
    name: Build and Push Docker Images
    needs: terraform-ecr
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Django Repository
        uses: actions/checkout@v4
        with:
          repository: jjoby12323/Angoor-JoinTask-Django
          ref: main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_DJANGO
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_CELERY

      - name: Build and Push Django Image
        run: |
          docker build -t django-app:latest -f Dockerfile .
          docker tag django-app:latest $ECR_DJANGO:latest
          docker push $ECR_DJANGO:latest

      - name: Build and Push Celery Image
        run: |
          docker build -t celery-worker:latest -f Dockerfile .
          docker tag celery-worker:latest $ECR_CELERY:latest
          docker push $ECR_CELERY:latest

  terraform-ecs:
    name: Terraform Apply (ECS)
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Terraform Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Apply (Full Deployment)
        run: terraform apply -auto-approve

      - name: Capture ECS Outputs
        id: tf_outputs
        run: |
          echo "ECS_CLUSTER=$(terraform output -raw ecs_django_cluster_name)" >> $GITHUB_ENV

  deploy:
    name: Deploy to ECS
    needs: terraform-ecs
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service django-service --force-new-deployment
          aws ecs update-service --cluster $ECS_CLUSTER --service celery-service --force-new-deployment
