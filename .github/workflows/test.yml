name: Update Docker Image & ECS Task

on:
  workflow_dispatch:  # Allows manual triggering from GitHub Actions

jobs:
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Django Repository
        uses: actions/checkout@v4
        with:
          repository: jjoby12323/Angoor-JoinTask-Django
          ref: main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set ECR Repositories Manually
        run: |
          echo "ECR_DJANGO=762233750800.dkr.ecr.us-east-1.amazonaws.com/django-app-dev" >> $GITHUB_ENV
          echo "ECR_CELERY=762233750800.dkr.ecr.us-east-1.amazonaws.com/celery-worker-dev" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_DJANGO
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_CELERY

      - name: Build and Push Django Image
        run: |
          IMAGE_TAG=$(date +%s)  # Use timestamp for unique tagging
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

          docker build -t django-app:$IMAGE_TAG -f Dockerfile .
          docker tag django-app:$IMAGE_TAG $ECR_DJANGO:$IMAGE_TAG
          docker push $ECR_DJANGO:$IMAGE_TAG

      - name: Build and Push Celery Image
        run: |
          docker build -t celery-worker:$IMAGE_TAG -f Dockerfile .
          docker tag celery-worker:$IMAGE_TAG $ECR_CELERY:$IMAGE_TAG
          docker push $ECR_CELERY:$IMAGE_TAG

  update-ecs:
    name: Update ECS Task Definition
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          TASK_FAMILY="django-task"
          ECS_CLUSTER="django-cluster"
          ECS_SERVICE="django-service"

          # Get latest task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)

          # Register a new task definition with the updated image
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMG "$ECR_DJANGO:$IMAGE_TAG" '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .containerDefinitions[0].image = $IMG')

          echo "$NEW_TASK_DEF" > new-task-def.json

          aws ecs register-task-definition --cli-input-json file://new-task-def.json

          # Force ECS Service to Deploy the New Task Definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment

      - name: Update Celery Task Definition
        run: |
          TASK_FAMILY="celery-task"
          ECS_CLUSTER="celery-cluster"
          ECS_SERVICE="celery-service"

          # Get latest task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)

          # Register a new task definition with the updated image
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMG "$ECR_CELERY:$IMAGE_TAG" '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .containerDefinitions[0].image = $IMG')

          echo "$NEW_TASK_DEF" > new-task-def.json

          aws ecs register-task-definition --cli-input-json file://new-task-def.json

          # Force ECS Service to Deploy the New Task Definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
